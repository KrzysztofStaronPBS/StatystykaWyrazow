import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;

public class MainFrame {
    private JFrame frame;

    // ścieżka do katalogu z plikami tekstowymi
    private static final String DIR_PATH = "files";

    // określa ile najczęściej występujących wyrazów bierzemy pod uwagę
    private final int liczbaWyrazowStatystyki;
    private final AtomicBoolean fajrant;

    private final int liczbaProducentow;
    private final int liczbaKonsumentow;

    // pula wątków – obiekt klasy ExecutorService, który zarządza tworzeniem
    // nowych oraz wykonuje 'recykling' zakończonych wątków
    private final ExecutorService executor;

    // lista obiektów klasy Future, dzięki którym mamy możliwość nadzoru pracy wątków
    // producenckich np. sprawdzania czy wątek jest aktywny lub jego anulowania/przerywania
    private final List<Future<?>> producentFuture;

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MainFrame window = new MainFrame();
                    window.frame.pack();
                    window.frame.setAlwaysOnTop(true);
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public MainFrame() {
        liczbaWyrazowStatystyki = 10;
        fajrant = new AtomicBoolean(false);
        liczbaProducentow = 1;
        liczbaKonsumentow = 2;
        executor = Executors.newFixedThreadPool(liczbaProducentow + liczbaKonsumentow);
        producentFuture = new ArrayList<>();
        initialize();
    }

    /**
     * Initialize the contents of the frame.
     */
    private void initialize() {
        frame = new JFrame();
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                executor.shutdownNow();
            }
        });
        frame.setBounds(100, 100, 450, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel panel = new JPanel();
        frame.getContentPane().add(panel, BorderLayout.NORTH);
        JButton btnStop = new JButton("Stop");
        btnStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fajrant.set(true);
                for (Future<?> f : producentFuture) {
                    f.cancel(true);
                }
            }
        });
        JButton btnStart = new JButton("Start");
        btnStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                multiThreadedStatistics();
            }
        });
        JButton btnZamknij = new JButton("Zamknij");
        btnZamknij.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                executor.shutdownNow();
                System.exit(0);
            }
        });
        panel.add(btnStart);
        panel.add(btnStop);
        panel.add(btnZamknij);
    }

    /**
     * Statystyka wyrazów (wzorzec PRODUCENT - KONSUMENT korzystający z kolejki blokującej)
     */
    private void multiThreadedStatistics() {
        for (Future<?> f : producentFuture) {
            if (!f.isDone()) {
                JOptionPane.showMessageDialog(frame, "Nie można uruchomić nowego zadania!" +
                        "Przynajmniej jeden producent nadal działa!", "OSTRZEŻENIE", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        fajrant.set(false);
        producentFuture.clear();
        final BlockingQueue<Optional<Path>> kolejka = new LinkedBlockingQueue<>(liczbaKonsumentow);
        final int przerwa = 60;

        Runnable producent = () -> {
            final String name = Thread.currentThread().getName();
            String info = String.format("PRODUCENT %s URUCHOMIONY ...", name);
            System.out.println(info);

            while (!Thread.currentThread().isInterrupted()) {
                if (fajrant.get()) {
                    try {
                        // Wysyłanie "poison pill" do kolejki, sygnalizujące koniec pracy
                        for (int i = 0; i < liczbaKonsumentow; i++) {
                            kolejka.put(Optional.empty());
                        }
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                    break;
                } else {
                    Path dir = Paths.get(DIR_PATH);
                    try {
                        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
                            final PathMatcher matcher = FileSystems.getDefault().getPathMatcher("glob:*.txt");

                            @Override
                            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                                if (matcher.matches(file.getFileName())) {
                                    Optional<Path> optPath = Optional.of(file);
                                    try {
                                        System.out.printf("Producent %s dodaje plik: %s%n", name, file);
                                        kolejka.put(optPath);
                                    } catch (InterruptedException e) {
                                        Thread.currentThread().interrupt();
                                    }
                                }
                                return FileVisitResult.CONTINUE;
                            }
                        });
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                try {
                    TimeUnit.SECONDS.sleep(60); // Producent ponownie sprawdzi katalog za 60 sekund
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            System.out.printf("PRODUCENT %s ZAKOŃCZYŁ PRACĘ%n", name);
        };

        Runnable konsument = () -> {
            final String name = Thread.currentThread().getName();
            System.out.printf("KONSUMENT %s URUCHOMIONY ...%n", name);
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    Optional<Path> optPath = kolejka.take();
                    if (optPath.isEmpty()) {
                        break; // Koniec pracy (otrzymano "poison pill")
                    }
                    Path path = optPath.get();
                    System.out.printf("KONSUMENT %s analizuje plik: %s%n", name, path);
                    Map<String, Long> statystyki = getLinkedCountedWords(path, liczbaWyrazowStatystyki);
                    statystyki.forEach((word, count) ->
                            System.out.printf("KONSUMENT %s: %s - %d%n", name, word, count)
                    );
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            System.out.printf("KONSUMENT %s ZAKOŃCZYŁ PRACĘ%n", name);
        };

        //uruchamianie wszystkich wątków-producentów
        for (int i = 0; i < liczbaProducentow; i++) {
            Future<?> pf = executor.submit(producent);
            producentFuture.add(pf);
        }
        //uruchamianie wszystkich wątków-konsumentów
        for (int i = 0; i < liczbaKonsumentow; i++) {
            executor.execute(konsument);
        }
    }

    /**
     * Metoda zwraca najczęściej występujące słowa (ich liczbę określa wordsLimit, a słowa są sortowane względem
     * częstotliwości ich występowania) we wskazanym pliku tekstowym
     */
    private Map<String, Long> getLinkedCountedWords(Path path, int wordsLimit) {
        try (BufferedReader reader = Files.newBufferedReader(path)) {
            return reader.lines()
                    .flatMap(line -> Stream.of(line.split("\\s+"))) // Podział na słowa
                    .map(word -> word.replaceAll("[^a-zA-Z0-9ąęóśćżńźĄĘÓŚĆŻŃŹ]", "")) // Usunięcie znaków specjalnych
                    .filter(word -> word.matches("[a-zA-Z0-9ąęóśćżńźĄĘÓŚĆŻŃŹ]{3,}")) // Minimum 3 znaki
                    .map(String::toLowerCase) // Normalizacja wielkości liter
                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) // Liczenie wystąpień
                    .entrySet().stream()
                    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) // Sortowanie malejąco
                    .limit(wordsLimit) // Ograniczenie do 'wordsLimit' najczęstszych słów
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

        } catch (IOException e) {
            throw new RuntimeException("Błąd odczytu pliku: " + path, e);
        }
    }

}

    /*
    Path dir = Paths.get(DIR);
    Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
        final PathMatcher pathMatcher("glob:*.txt);

        @Override
        public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {
            if (attrs.isRegularFile() && pathMatcher,matches(path.getFileName())) { // zamiast if(path.toString().endsWith
            Optional<Path> optPath = Optional.ofNullable(path);
            try {
                String info = String.format("Producent %s wstawia lub oczekuje na możliwość wstawienia do kolejki ścieżki %s", name, path.getFileName());
                System.out.println(info);
                Kolejka.put(optPath);
            } catch (InterruptedException e) {
                String info = String.format("Przerwane oczekiwanie producenta %s na możliwość umieszczenia w kolejce ścieżki", path.getFileName());
                System.out.println(info);
                if(!fajrant.get()) Thread.currentThread().interrupt();
            }
        }
        return FileVisitResult.CONTINUE;
    }
});
     */